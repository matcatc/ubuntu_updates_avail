This is a simple script that I wrote in order to display update info in my conky.

http://matcatc.github.com/ubuntu_updates_avail/

Requirements
------------
- python 3
- apt-get

While I made it for my Ubuntu install, since it uses apt-get, any machine with
apt-get properly setup should be able to use this script. Also, although I
wrote this script with python 3, its probably close enough to python2 that one
could port it easily one was so inclined.


Installation
------------

1) Just drop ubuntu_updates_avail.py in a directory somewhere.

2) If you want it to be run on a cron job (which is what most people will
    want), then add a line to the crontab:
        `crontab -e`
        `sudo crontab -e` (for root's crontab)

    If you're going to have the script call update (which is default
    behavior), then it'll need root access, and thus should be put in the
    root's crontab.

    ex) Here's an example from my root crontab:
        `@hourly /home/user_name/.conky/ubuntu_updates_avail.py --base_dir /home/user_name/.conky/ --template template --num_update_checks 3 ubuntu_updates_avail.info`

3) Add a line to your conky script to read in the generated file

    ex)
    `${execi 900 cat ~/.conky/ubuntu_updates_avail.info}`


Building Documentation
----------------------
Run build_documentation.sh. It will build all the documentation in the doc subdirectory.

In order to get doxygen working better with python, I added the following to my Doxyfile:

INPUT_FILTER = “python /path/to/doxypy.py”

Where doxypy.py is from: http://code.foosel.org/doxypy

You can remove the INPUT_FILTER line if you want to keep from having to download and setup doxypy. The output might not be as pretty, though.

Pushing Documentation
---------------------
Use gh-pages_push.sh to push the autogenerated docs out to github. The bash
script properly calls the ruby script that does the actual work, so that you
don't need to remember the proper syntax for calling it.

The ruby script takes the appropriate files from doc on the current branch and
commits it to the local gh-pages branch. The local branch is then pushed out to
origin/gh-pages. Note that the docs are from the local branch. So you'll want
to call this script from your documentation branch (or wherever your docs are).
The script will overwrite everything on the gh-pages branch, so if you want
something to be kept/included, you'll need to add it to the documentation store
and include it in the copy over (e.g: index.html).

You'll of course need the keys (or whatever you use) to be set up before hand
for this script to work. I.e: if you can't push to your remote repo manually,
automating it won't help.

The values for the files to copy over are hardwired into the ruby script, so if
you want to adapt it for personal use, you'll need to edit it.

The ruby script uses Grancher and was based off of documentation/exapmles found
online for it.


Licensing
---------

Licensed under GNU GPL v.3.0.

See COPYING and the in file documentation for more information.


Notes
-----

See the --help output for a list of command line options.

This program requires root privileges in order to call apt-get update. If you
don't want to give root access, you could instead update on your own and then
call this program with --no-root. An (approximate) example crontab for this:
    @hourly apt-get update                                      # root's crontab
    @5 * * * * user ubuntu_updates_avail.py --no-root out.out   # your crontab
Thus this program doesn't use root but still has access to the updated information.

The in file documentation has a lot of information which may be useful for end
users (particularly that near the beginning of the file).

Because of the nature of the script, it is very difficult to test. I think I
probably could write unit tests for all of it by extracting the sub-process
calls to their own objects then mocking them, but doing so might not be
worthwhile. Anyways, until I get testing setup, the script is not going to be
extensively tested. So bug reports will be very much appreciated. If I don't
see the bug when running the script myself, then I am reliant on you and other
users to report them to me, so please do.

I'm currently considering dropping the network checking ability altogether. It
never really worked well (too many false positives) and I feel that trying
update several times works much better. But before I remove this feature, I'd
like to get some user feedback. Please send me an email (see below) if you have
an opinion on this (or anything else) which you'd like to share. If I don't get
any feedback, I'll probably end up removing it to reduce code complexity.


Downloads
---------

This script is hosted on github at:
https://github.com/matcatc/ubuntu_updates_avail


Contact
-------

Please feel free to contact me through github or using the contact information
located there (https://github.com/matcatc/ubuntu_updates_avail)


Matthew Todd
Jan 15, 2010
Mar 7, 2011
