branch descriptions:

master: ready to be seen by whole world
    question: when to push to origin/master?
develop: what's being worked on. Parent branch for topical branches. Topical branches are merged into develop once they are done. They sit in develop for a little while before being tested (through curr_running.)
    d_...: development topical branch
    b_...: bug topical branch
curr_running: what's currently running on my system (for testing purposes.)

Usually branches are in this order (<= ordering):
    origin/master - master - curr_running - develop - topical


The items in this file aren't in order, but generally items towards the top are more important.
-----------------------------------------------------------------------------------------------

- proper and unique exit codes
    Will want a MACRO dictionary or the like
 - proper and unique error messages for the different situations
    Perhaps make the error messages contain the exit codes too

- mash except statements into one general statment
    What about printing error output?
        Have the exceptinos store the error output
    What about return codes?
        Have the exceptions store the return code for their exception type?

    How about having the exceptions store a key that can be used to access different dictionaries to get information relating to that particular exception.
        What should the key be?
            Consider: __name__ (of the exception class)
        Should the key be something that can be used by others besides the exceptions?

        What about defining the dicts?
            Would we want the definition of each Exception class to add itself to the dict (during definition)
                Dict def spread out over code, but exception code local (easier to add/remove/edit exceptions)
                Might be problematic in making sure that each exception has its own unique error code.
                    What about dynamically assigned error codes?
                        Perhaps have an option for the user to request them?
                        Probably more work than their worth. Maybe interesting to prototype though.
                    What about macros uptop?
                        What's the difference from just defining the whole dictionary uptop then?
            Or have all of the dict's definition in one place?
                Clearer what's in dict, but exception code spread out (harder to add/remove/edit exceptions)


items to consider:
no particular order
-------------------
- option: max width of output
    That way the output won't get too long and mess up conky
    Should be easy, just use textwrap module

- option: no update if no internet?
    make default?
        then provide a way to override (--force-update or --always-update)
    what about cases where the user has a local mirror?
        as long as the proper adddress is specified, our current network checking code should work.

- option: --no-root
    don't do anything requiring root

- option: number of tries for apt-get update
    -c (from ping)
    I've noticed that apt-get update has been failing a lot recently b/c of dns issues. So if we add a number of tries (default 1) then it will keep trying to update until it suceedes or until the number is reached.

- option: --no-update
    don't update
    b/c:
        system may already be
        reduces runtime
        script may not be smart enough (e.g: local mirror and no internet, script may terminate early b/c in a normal setup the computer wouldn't be able to update)
        may be running regularly to debug, and don't want it updating a lot
 
- no ping output to terminal
    not high priority b/c only times users will see this is when debugging/ trying out for the first time
        although first impressions are pretty important

- other time formats
    current time format is long and annoying
    perhaps a way for the user to specify
        command line option
        in template
            might require parsing the template and removing stuff
            perhaps could pass template through time printing function

- KISS
    is the script becoming too complicated?

- short command line options
    going to be hard to do well
    note that it is common for some applications to have lowercase options be positive and uppercase be negative.
        Ex: -u update
            -U no-update

- option: server address
    allow user to specify the server to ping in order to verify network connectivity

- better looking --help output

- add docs (docbook) ?
    the script has certainly gotten large enough that a manpage may be desired
    or perhaps just update the README?

- change default output to something more sensible.

- testing
    unit testing won't be easy due to the calls to the subprocesses
        extract calls to subprocesses to functions/objects
            mock them in unit tests
    how big will the unit testing be in relation to the code?
        how much is acceptable?
        separate file?
            command line option?

- version number
    we'll want a way to specify this easily
    DRY: if we end up using a setup.py, we'll want one source for the version number

- look into aptdaemon package for python. Supposed to be a dbus interface for debian based package management. Don't know if it'll work for what we're doing, but definitely worth a look.

